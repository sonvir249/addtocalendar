<?php

/**
 * @file
 */

/**
 * Implements hook_help().
 */
function addtocalendar_help($path, $arg) {
  switch ($path) {
    case 'admin/help#addtocalendar':
      $output = file_get_contents(drupal_get_path('module', 'addtocalendar') . '/README.md');
      return $output;
  }
}

/**
 * Implement hook_field_info().
 */
function addtocalendar_field_info() {
  return array(
    'addtocalendar' => array(
      'label' => t('Add to calendar'),
      'description' => t('Add to calendar field type.'),
      'default_widget' => 'addtocalendar_widget',
      'default_formatter' => 'addtocalendar_formatter',
    ),
  );
}


/**
 * Implement hook_field_formatter_info().
 */
function addtocalendar_field_formatter_info() {
  return array(
    'addtocalendar_formatter' => array(
      'label' => 'Add to calendar',
      'field types' => array('addtocalendar'),
    )
  );
}

/**
 * Implement hook_field_widget_info().
 */
function addtocalendar_field_widget_info() {
  return array(
    'addtocalendar_widget' => array(
      'label' => t('Add to calendar widget'),
      'field types' => array('addtocalendar'),
    )
  );
}

/**
 * Implement hook_field_widget_form().
 */
function addtocalendar_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($field['cardinality'] == 1) {
    $element['#type'] = 'fieldset';
  }
  $element['display_addtocalendar'] = array(
    '#title' => t('Show add to calendar widget'),
    '#type' => 'checkbox',
    '#default_value' => isset($items[$delta]['display_addtocalendar']) ? $items[$delta]['display_addtocalendar'] : '',
  );

  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function addtocalendar_field_widget_settings_form($field, $instance) {
  if ($instance['display']['default']['type'] == 'addtocalendar_formatter') {
    $field_list = field_info_instances($instance['entity_type'], $instance['bundle']);

    $element = array();
    $element['addtocalendar_display_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Display Text'),
      '#default_value' => !empty($instance['widget']['settings']['addtocalendar_display_text']) ? $instance['widget']['settings']['addtocalendar_display_text'] : t('Add to Calender'),
      '#required' => TRUE,
    );

    $element['addtocalendar_disable_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Disable Text'),
      '#default_value' => !empty($instance['widget']['settings']['addtocalendar_disable_text']) ? $instance['widget']['settings']['addtocalendar_disable_text'] : t('Add to Calender is disabled'),
    );

    $element['addtocalendar_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show Add to calendar settings'),
      '#default_value' => isset($instance['widget']['settings']['addtocalendar_show']) ? $instance['widget']['settings']['addtocalendar_show'] : '',
    );

    $element['addtocalendar_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add to Calendar Settings'),
      '#states' => array(
        "visible" => array(
          "input[name*='addtocalendar_show']" => array("checked" => TRUE),
        ),
      ),
    );
    $element['addtocalendar_settings']['style'] = array(
      '#type' => 'select',
      '#title' => t('Select Style'),
      '#options' => array(
        0 => t('No Styling'),
        'blue' => t('Blue'),
        'glow_orange' => t('Glow Orange'),
      ),
      '#default_value' => !empty($instance['widget']['settings']['addtocalendar_settings']['style']) ? $instance['widget']['settings']['addtocalendar_settings']['style'] : 'blue',
    );

    $field_options = array();
    foreach ($field_list as $id => $field_i) {
      $field_options[$id] = $field_i['label'];
    }
    $field_options = array_merge(
      array('token' => t('Use Token/Static Content')),
      array('title' => t('Title')),
      $field_options
    );

    $info = array(
      'atc_title' => t('Title'),
      'atc_description' => t('Description'),
      'atc_location' => t('Location'),
      'atc_organizer' => t('Organizer'),
      'atc_date_start' => t('Start date'),
      'atc_date_end' => t('End date'),
    );

    foreach ($info as $id => $label) {
      $element['addtocalendar_settings'][$id]['field'] = array(
        '#type' => 'select',
        '#title' => check_plain($label . ': field'),
        '#options' => $field_options,
        '#description' => t('Select field to be used as @label for calendar events', array('@label' => $label)),
        '#default_value' => !empty($instance['widget']['settings']['addtocalendar_settings'][$id]['field']) ? $instance['widget']['settings']['addtocalendar_settings'][$id]['field'] : '',
      );

      $element['addtocalendar_settings'][$id]['tokenized'] = array(
        '#type' => 'textfield',
        '#title' => check_plain($label . ': Static/Tokenized Content'),
        '#default_value' => !empty($instance['widget']['settings']['addtocalendar_settings'][$id]['tokenized']) ? $instance['widget']['settings']['addtocalendar_settings'][$id]['tokenized'] : '',
        '#description' => 'Select field to be used as ' . $label . ' for calendar events'
      );
    }

    $element['addtocalendar_settings']['atc_organizer_email'] = array(
      '#type' => 'textfield',
      '#title' => t('Organizer email: Static/Tokenized Content'),
      '#default_value' => !empty($instance['widget']['settings']['addtocalendar_settings']['atc_organizer_email']) ? $instance['widget']['settings']['addtocalendar_settings']['atc_organizer_email'] : variable_get('site_mail', ''),
    );

    $element['addtocalendar_settings']['atc_privacy'] = array(
      '#type' => 'select',
      '#title' => t('Privacy'),
      '#options' => array(
        'public' => t('Public'),
        'private' => t('Private'),
      ),
      '#description' => t('Use public for free access to event information from any places. User private if the event is closed to public access.'),
      '#default_value' => !empty($instance['widget']['settings']['addtocalendar_settings']['atc_privacy']) ? $instance['widget']['settings']['addtocalendar_settings']['atc_privacy'] : '',
    );

    $element['addtocalendar_settings']['data_secure'] = array(
      '#type' => 'select',
      '#title' => t('Security level'),
      '#options' => array(
        'auto' => t('Auto'),
        'true' => t('Use https only'),
        'false' => t('Use http only'),
      ),
      '#default_value' => !empty($instance['widget']['settings']['addtocalendar_settings']['data_secure']) ? $instance['widget']['settings']['addtocalendar_settings']['data_secure'] : '',
    );
    $element['addtocalendar_settings']['data_calendars'] = array(
      '#type' => 'checkboxes',
      '#options' => array(
        'iCalendar' => t('iCalendar'),
        'Google Calendar' => t('Google Calendar'),
        'Outlook' => t('Outlook'),
        'Outlook Online' => t('Outlook Online'),
        'Yahoo! Calendar' => t('Yahoo! Calendar'),
      ),
      '#default_value' => !empty($instance['widget']['settings']['addtocalendar_settings']['data_calendars']) ? $instance['widget']['settings']['addtocalendar_settings']['data_calendars'] : '',
      '#title' => t('List of calendars to show in button list.'),
    );
    return $element;
  }
}

/**
 * Implement hook_field_is_empty().
 */
function addtocalendar_field_is_empty($item, $field) {
  if (empty($item['display_addtocalendar'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implement hook_field_validate().
 */
function addtocalendar_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $key =>  $item) {
    if (!empty($item['display_addtocalendar'])) {
      //Make sure it is available
      if (empty($item['display_addtocalendar'])) {
        $errors[$field['field_name']][$langcode][$key][] = array(
          'error' => 'addtocalendar_check',
          'message' => t('Some error in Add to calendar')
        );
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function addtocalendar_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $instance['widget']['settings']['addtocalendar_settings'];
  if ($display['type'] == 'addtocalendar_formatter') {
    if (isset($items[0])) {
      $timezone = variable_get('date_default_timezone', '');
      $button_text = $instance['widget']['settings']['addtocalendar_display_text'];
      foreach ($items as $delta => $item) {
        $build['addtocalendar_button_text'] = array(
          '#type' => 'html_tag',
          '#tag' => 'a',
          '#value' => $button_text,
          '#attributes' => array(
            'class' => 'atcb-link'
          )
        );

        $info = array(
          'atc_title',
          'atc_description',
          'atc_location',
          'atc_organizer',
          'atc_date_start',
          'atc_date_end',
        );


        foreach ($info as $value) {
          $class_value = $value;
          if ($settings[$value]['field'] == 'token') {
            $class_value = $settings[$value]['tokenized'];
          }
          elseif ($settings[$value]['field'] == 'title') {
            $class_value = entity_label($entity_type, $entity);
          }
          elseif (isset($entity->{$settings[$value]['field']})) {
            $class_value = isset($entity->{$settings[$value]['field']}[LANGUAGE_NONE][0]['value']) ? $entity->{$settings[$value]['field']}[LANGUAGE_NONE][0]['value'] : '';
          }

          $settings[$value]['tokenized'] = !empty($settings[$value]['tokenized']) ? $settings[$value]['tokenized'] : date('Y-m-d h:i:s', time());

          if ($value == 'atc_date_start' || $value == 'atc_date_end') {
            $class_value = convert_time_to_Local($settings[$value]['tokenized'], $timezone);
            if ($settings[$value]['field'] == 'field_date') {
              $class_value = $entity->{$settings[$value]['field']}[LANGUAGE_NONE][0]['value'];
            }
          }

          $build['addtocalendar'][$value] = array(
            '#type' => 'html_tag',
            '#tag' => 'var',
            '#value' => $class_value,
            '#attributes' => array(
              'class' => $value,
            ),
          );
        }

        $build['addtocalendar']['atc_organizer_email'] = array(
          '#type' => 'html_tag',
          '#tag' => 'var',
          '#value' => $settings['atc_organizer_email'],
          '#attributes' => array(
            'class' => 'atc_organizer_email',
          ),
        );

        $build['addtocalendar']['atc_timezone'] = array(
          '#type' => 'html_tag',
          '#tag' => 'var',
          '#value' => $timezone,
          '#attributes' => array(
            'class' => 'atc_timezone',
          ),
        );

        $build['addtocalendar']['atc_privacy'] = array(
          '#type' => 'html_tag',
          '#tag' => 'var',
          '#value' => $settings['atc_privacy'],
          '#attributes' => array(
            'class' => 'atc_privacy',
          ),
        );

        $build['addtocalendar'] = array(
          '#type' => 'html_tag',
          '#tag' => 'span',
          '#value' => render($build['addtocalendar_button_text']) . '<var class="atc_event">' . render($build['addtocalendar']) . '</var>',
          '#attributes' => array(
            'class' => array(
              'addtocalendar',
            ),
          ),
        );

        if ($settings['data_calendars']) {
          $value = '';
          foreach ($settings['data_calendars'] as $key => $set) {
            if ($set) {
              $value .= $key . ', ';
            }
          }
          if ($value) {
            $build['addtocalendar']['#attributes']['data-calendars'] = $value;
          }
        }

        $build['addtocalendar']['#attributes']['data-secure'] = $settings['data_secure'];
        // Styling.
        switch ($settings['style']) {
          case 'blue':
            $style['class'] = 'atc-style-blue';
            drupal_add_js('//addtocalendar.com/atc/1.5/atc.min.js', 'external');
            drupal_add_css('//addtocalendar.com/atc/1.5/atc-style-blue.css', 'external');
            break;

          case 'glow_orange':
            $style['class'] = 'atc-style-glow-orange';
            drupal_add_js('//addtocalendar.com/atc/1.5/atc.min.js', 'external');
            drupal_add_css('//addtocalendar.com/atc/1.5/atc-style-glow-orange.css', 'external');
            break;

          default:
            drupal_add_js('//addtocalendar.com/atc/1.5/atc.min.js', 'external');
            drupal_add_css('//addtocalendar.com/atc/1.5/atc-base.css', 'external');
            break;
        }
        if (!empty($style)) {
          $build['addtocalendar']['#attributes']['class'][] = $style['class'];
        }
        $element[]['#markup'] = render($build['addtocalendar']);
      }
    }
    else{
      $element = array(
        '#prefix' => '<div class="wrapper">',
        '#suffix' => '<div>' . $instance['widget']['settings']['addtocalendar_disable_text'] . '</div></div>',
      );
    }
  }
  return $element;
};

/*
 * Get local time
 */
function convert_time_to_Local($datetime, $timezone) {
  $given = new DateTime($datetime, new DateTimeZone("Asia/Kolkata"));
  $given->setTimezone(new DateTimeZone($timezone));
  $output = $given->format("Y-m-d h:i:s"); //can change as per your requirement
  return $output;
}